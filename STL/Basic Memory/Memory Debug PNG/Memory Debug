/*
 * A simple libpng example program
 * http://zarb.org/~gc/html/libpng.html
 *
 * Modified by Yoshimasa Niwa to make it much simpler
 * and support all defined color_type.
 *
 * To build, use the next instruction on OS X.
 * $ brew install libpng
 * $ clang -lz -lpng16 libpng_test.c
 *
 * Copyright 2002-2010 Guillaume Cottenceau.
 *
 * This software may be freely redistributed under the terms
 * of the X11 license.
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <png.h>
#include <iostream>

int width, height;
png_byte color_type;
png_byte bit_depth;
png_bytep* row_pointers = NULL;

void read_png_file(char* filename) {
	FILE* fp = fopen(filename, "rb");

	png_structp png = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (!png) abort();

	png_infop info = png_create_info_struct(png);
	if (!info) abort();

	//if (setjmp(png_jmpbuf(png))) abort();

	png_init_io(png, fp);

	png_read_info(png, info);

	width = png_get_image_width(png, info);
	height = png_get_image_height(png, info);
	color_type = png_get_color_type(png, info);
	bit_depth = png_get_bit_depth(png, info);

	// Read any color_type into 8bit depth, RGBA format.
	// See http://www.libpng.org/pub/png/libpng-manual.txt

	if (bit_depth == 16)
		png_set_strip_16(png);

	if (color_type == PNG_COLOR_TYPE_PALETTE)
		png_set_palette_to_rgb(png);

	// PNG_COLOR_TYPE_GRAY_ALPHA is always 8 or 16bit depth.
	if (color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8)
		png_set_expand_gray_1_2_4_to_8(png);

	if (png_get_valid(png, info, PNG_INFO_tRNS))
		png_set_tRNS_to_alpha(png);

	// These color_type don't have an alpha channel then fill it with 0xff.
	if (color_type == PNG_COLOR_TYPE_RGB ||
		color_type == PNG_COLOR_TYPE_GRAY ||
		color_type == PNG_COLOR_TYPE_PALETTE)
		png_set_filler(png, 0xFF, PNG_FILLER_AFTER);

	if (color_type == PNG_COLOR_TYPE_GRAY ||
		color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
		png_set_gray_to_rgb(png);

	png_read_update_info(png, info);

	if (row_pointers) abort();

	row_pointers = (png_bytep*)malloc(sizeof(png_bytep) * height);
	for (int y = 0; y < height; y++) {
		row_pointers[y] = (png_byte*)malloc(png_get_rowbytes(png, info));
	}

	png_read_image(png, row_pointers);

	fclose(fp);

	png_destroy_read_struct(&png, &info, NULL);
}

void write_png_file(char* filename) {
	int y;

	FILE* fp = fopen(filename, "wb");
	if (!fp) abort();

	png_structp png = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (!png) abort();

	png_infop info = png_create_info_struct(png);
	if (!info) abort();

	if (setjmp(png_jmpbuf(png))) abort();

	png_init_io(png, fp);

	// Output is 8bit depth, RGBA format.
	png_set_IHDR(
		png,
		info,
		width, height,
		8,
		PNG_COLOR_TYPE_RGBA,
		PNG_INTERLACE_NONE,
		PNG_COMPRESSION_TYPE_DEFAULT,
		PNG_FILTER_TYPE_DEFAULT
	);
	png_write_info(png, info);

	// To remove the alpha channel for PNG_COLOR_TYPE_RGB format,
	// Use png_set_filler().
	//png_set_filler(png, 0, PNG_FILLER_AFTER);

	if (!row_pointers) abort();

	png_write_image(png, row_pointers);
	png_write_end(png, NULL);

	for (int y = 0; y < height; y++) {
		free(row_pointers[y]);
	}
	free(row_pointers);

	fclose(fp);

	png_destroy_write_struct(&png, &info);
}


void process_png_file() {
	for (int y = 0; y < height; y++)
	{
		png_bytep row = row_pointers[y];
		for (int x = 0; x < width; x++)
		{
			png_bytep px = &(row[x * 4]);
			px[0] = (unsigned char)(255 - (int)px[0]); // R
			px[1] = (unsigned char)(255 - (int)px[1]); // G
			px[2] = (unsigned char)(255 - (int)px[2]); // B
			px[3] = px[3];							   // Alpha

		}
	}
}

void flip_png_file()       // Flip 
{
	for (int y = 0; y < height; y++)
	{
		png_bytep row = row_pointers[y];
		for (int x = 0; x < width / 2; x++)
		{
			png_bytep px = &(row[x * 4]);
			png_bytep pxf = &(row[(width - x - 1) * 4]);
			png_byte temp;
			temp = px[0];
			px[0] = pxf[0];
			pxf[0] = temp;

			temp = px[1];
			px[1] = pxf[1];
			pxf[1] = temp;

			temp = px[2];
			px[2] = pxf[2];
			pxf[2] = temp;

			temp = px[3];
			px[3] = pxf[3];
			pxf[3] = temp;
		}
	}
	for (int y = 0; y < height / 2; y++)
	{
		png_bytep row = row_pointers[y];
		row_pointers[y] = row_pointers[height - y - 1];
		row_pointers[height - y - 1] = row;

	}
}
void add_blue_rectangle()
{
	for (int y = height / 4 + 1; y < 3 * height / 4 - 1; y++)
	{
		png_bytep row = row_pointers[y];
		for (int x = width / 4 + 1; x < 3 * width / 4 - 1; x++)
		{
			png_bytep px = &(row[x * 4]);

			px[0] = 0;     // R 
			px[1] = 0;     // G
			px[2] = 255;   // B
			px[3] = 255;   // alpha

		}
	}


}
void process_yellow() {
	for (int y = 0; y < height; y++)
	{
		png_bytep row = row_pointers[y];
		for (int x = 0; x < width; x++)
		{
			png_bytep px = &(row[x * 4]);

			if (px[0] > 75 && px[1] > 75)
				for (int i = 0; i < 200; i++)
					if (px[2] == i)
						px[3] = 255 - (px[0] + px[1]) / 2;							   // Alpha      
		}
	}
}


void rotate_90_degree()
{

	/*   row_pointers = (png_bytep*)malloc(sizeof(png_bytep) * height);
	   for (int y = 0; y < height; y++) {
		   row_pointers[y] = (png_byte*)malloc(png_get_rowbytes(png, info));
	  */

	png_structp png = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (!png) abort();

	png_infop info = png_create_info_struct(png);
	if (!info) abort();
	png_set_IHDR(
		png,
		info,
		width, height,
		8,
		PNG_COLOR_TYPE_RGBA,
		PNG_INTERLACE_NONE,
		PNG_COMPRESSION_TYPE_DEFAULT,
		PNG_FILTER_TYPE_DEFAULT
	);

	width = png_get_image_width(png, info);
	height = png_get_image_height(png, info);
	color_type = png_get_color_type(png, info);
	bit_depth = png_get_bit_depth(png, info);
	png_read_update_info(png, info);


	if (width > height)
	{
		row_pointers = (png_bytep*)realloc(row_pointers, sizeof(png_bytep) * width);
		for (int y = height; y < width; y++)
		{
			row_pointers[y] = (png_byte*)malloc(png_get_rowbytes(png, info));
		}
	}
	else if (width < height)
	{
		for (int y = 0; y < height; y++)
		{

			row_pointers[y] = (png_byte*)realloc(row_pointers[y], sizeof(png_bytep) * png_get_rowbytes(png, info));

		}
	}

	int maxx_w_h;
	if (width >= height)maxx_w_h = width;
	else maxx_w_h = height;
	int temp1 = height;
	height = width;
	width = temp1;


	struct rotate {
		png_byte px0;
		png_byte px1;
		png_byte px2;
		png_byte px3;
	};
	rotate a[3];
	int z;

	for (int y = 0; y < maxx_w_h; y++)
	{
		png_bytep row = row_pointers[y];
		// png_bytep next_row = row_pointers[y+1];
		z = y + 1;
		for (int x = y + 1; x < maxx_w_h; x++)
		{
			png_bytep px = &(row[x * 4]);
			png_bytep next_row = row_pointers[z];
			png_bytep pxn = &(next_row[y * 4]);
			a[1].px0 = px[0];
			a[1].px1 = px[1];
			a[1].px2 = px[2];
			a[1].px3 = px[3];

			a[2].px0 = pxn[0];
			a[2].px1 = pxn[1];
			a[2].px2 = pxn[2];
			a[2].px3 = pxn[3];

			pxn[0] = px[0];
			pxn[1] = px[1];
			pxn[2] = px[2];
			pxn[3] = px[3];

			px[0] = a[2].px0;
			px[1] = a[2].px1;
			px[2] = a[2].px2;
			px[3] = a[2].px3;

			z++;
		}

	}



	for (int y = 0; y < height; y++)
	{
		png_bytep row = row_pointers[y];
		for (int x = 0; x < width / 2; x++)
		{
			png_bytep px = &(row[x * 4]);
			png_bytep pxf = &(row[(width - x - 1) * 4]);
			png_byte temp;
			temp = px[0];
			px[0] = pxf[0];
			pxf[0] = temp;

			temp = px[1];
			px[1] = pxf[1];
			pxf[1] = temp;

			temp = px[2];
			px[2] = pxf[2];
			pxf[2] = temp;

			temp = px[3];
			px[3] = pxf[3];
			pxf[3] = temp;
		}
	}



}





int main(int argc, char* argv[]) {
	if (argc != 3)
		abort();

	read_png_file(argv[1]);
	process_png_file();

	// ****Modificare aduse***


	flip_png_file();  // flip H+V;
	add_blue_rectangle();   // add blue rectangle
	process_yellow();     // make yellow transparent 

	rotate_90_degree();   //rotate 90 degree clockwise (prin rotatie width si height fac swap)
	//rotate_90_degree();
	// rotate_90_degree();
	// rotate_90_degree();



	write_png_file(argv[2]);

	return 0;
}
